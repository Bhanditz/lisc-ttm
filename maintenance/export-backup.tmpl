#!/bin/sh

# Usage: './export-ttm-backup'
#
# Grab today's backup of the TTM databases, package it as an encrypted
# file, and put it in a place from which it can be downloaded.
#
# Don't run this as the web server user; run it as the backup user.
#
# This script takes no arguments, but expects the following to be true
# (adjust paths and users as needed for your system, of course):
#
#    - Directory ${EXPORT_DEST} exists and is writeable whatever
#      user or group this script runs as (but that user/group should
#      not be the web server -- see below);
#
#    - Directory ${EXPORT_DEST}/sandbox exists, is readable+writeable
#      by the user or group this script runs as, and is *not* readable
#      by the web server user. 
#
# See also 'get-ttm-prod-backup', this script's counterpart for the
# remote server.

EXPORT_DEST=__EXPORT_DEST__
SANDBOX=${EXPORT_DEST}/sandbox
EXPORT_KEY=__EXPORT_KEY__
BACKUP_PREFIX=__BACKUP_PREFIX__

# GnuPG gives errors if it can't find its run-time conf dir.  Due to
# the user this script may be running as, ~/.gnupg won't always work,
# so we create a temporary conf dir, with exactly the permissions that
# make GnuPG happiest, and tell GnuPG to use that dir instead.  Note
# this is all silly because we're using symmetric encryption anyway,
# so GnuPG really shouldn't demand a conf dir at all, since no changes
# to keyrings are involved.
GPG_LOSSAGE_DIR=${SANDBOX}/.gnupg_lossage
rm -rf ${GPG_LOSSAGE_DIR}
mkdir ${GPG_LOSSAGE_DIR}
chmod go-rwx ${GPG_LOSSAGE_DIR}
GNUPGHOME=${GPG_LOSSAGE_DIR}
export GNUPGHOME

BACKUPS_TOP=__BACKUPS_TOP__

DATE_YMD_PREFIX="__DATE_YMD_PREFIX__"
THIS_DATE=`(date +${DATE_YMD_PREFIX})`

cd ${SANDBOX}

for tgz_backup in ${BACKUPS_TOP}/${BACKUP_PREFIX}-${THIS_DATE}*.tar.gz; do
  tgz_basename=`basename ${tgz_backup}`
  cp -a ${tgz_backup} ./${tgz_basename}
  # https://bugs.g10code.com/gnupg/issue1403 results from this gpg command:
  echo -n "${EXPORT_KEY}" | gpg --no-options --lock-never --quiet      \
                                --no-tty                               \
                                --passphrase-fd 0 -ca                  \
                                ${SANDBOX}/${tgz_basename}

  # Clean up the temporary files and directories.
  rm ${tgz_basename}
  rm -rf ${GPG_LOSSAGE_DIR}
  
  # Put the encrypted backup in a place it can be downloaded from.
  mv ${tgz_basename}.asc ${EXPORT_DEST}/${tgz_basename}.asc
done
