#!/bin/bash

# Here's one way to do backups on the production server:
#
# Create a user named 'ttmbackup', whose has no password, whose shell
# is set to /bin/bash, and whose home directory is readable only by
# that user & group.
#
# Create also a MySQL user named 'ttmro' (for "TTM read-only"), with
# read access to all of the TTM databases and MySQL procecdures:
#
#   GRANT USAGE ON *.*                                \
#         TO ttmro@localhost IDENTIFIED BY 'PASSWD';
#   GRANT SELECT ON `mysql`.`proc`                    \
#         TO ttmro@localhost IDENTIFIED BY 'PASSWD';
#   GRANT SELECT, LOCK TABLES ON `ttm-core`.*         \
#         TO ttmro@localhost IDENTIFIED BY 'PASSWD';
#   GRANT SELECT, LOCK TABLES ON `ttm-trp`.*          \
#         TO ttmro@localhost IDENTIFIED BY 'PASSWD';
#   GRANT SELECT, LOCK TABLES ON `ttm-swop`.*         \
#         TO ttmro@localhost IDENTIFIED BY 'PASSWD';
#   GRANT SELECT, LOCK TABLES ON `ttm-lsna`.*         \
#         TO ttmro@localhost IDENTIFIED BY 'PASSWD';
#   GRANT SELECT, LOCK TABLES ON `ttm-enlace`.*       \
#         TO ttmro@localhost IDENTIFIED BY 'PASSWD';
#   GRANT SELECT, LOCK TABLES ON `ttm-bickerdike`.*   \
#         TO ttmro@localhost IDENTIFIED BY 'PASSWD';
#
# (PASSWD should be the same for all of them.)
#
# Then run ./make-backup-script, for example like this:
#
#   $ ./make-backup-script
#   Top destination directory for backups: /home/ttmbackup/backups
#   DB user with read-only access to TTM databases: ttmro
#   Password for DB user: (same PASSWD from above)
#
#   Backup script created: 'backup-ttm'
#
#   $ 
#
# Now you have a 'backup-ttm' script that you can run as in a cron job
# as user 'ttmbackup', assuming you set up permissions appropriately.
# For example, you could put this in /etc/crontab
#
#   30 3 * * * ttmbackup /usr/local/bin/backup-ttm
#
# ...to have the script run at 3:30am every morning and put the backup
# in /home/ttmbackup/backups/DATE/.  (Of course, you might want to have
# another cron job that then copies the backup to a remote location.)
#
#  ************************ <<< IMPORTANT NOTE >>> ************************
#  **                                                                    **
#  **  Keep the generated 'backup-ttm' script private!  It contains a    **
#  **  password that allows read-only access to all your TTM databases.  **
#  **                                                                    **
#  ************************************************************************

BACKUPS_TOP=__BACKUPS_TOP__
BACKUP_USER=__USER__
DB_USER=__DB_USER__
DB_PASS=__DB_PASS__
DATE_YMD_PREFIX="__DATE_YMD_PREFIX__"
DATE_FULL_FORMAT="__DATE_FULL_FORMAT__"

# You could customize this if you want, but there's no real reason to:
BACKUP_PREFIX=__BACKUP_PREFIX__

# Get the date now, so that even if intermediate steps are so slow as
# to let more than a second pass, or if they cross midnight and change
# the day, none of that will affect the name of the backup.
BACKUP_TIME=`(date +"${DATE_FULL_FORMAT}")`

# Remove backup(s) from two weeks ago
if [ $(date +%u) = 1 ]; then
  rm -f ${BACKUPS_TOP}/`date -d'monday-fortnight ago' +${DATE_YMD_PREFIX}`*
fi
if [ $(date +%u) = 2 ]; then
  rm -f ${BACKUPS_TOP}/`date -d'tuesday-fortnight ago' +${DATE_YMD_PREFIX}`*
fi
if [ $(date +%u) = 3 ]; then
  rm -f ${BACKUPS_TOP}/`date -d'wednesday-fortnight ago' +${DATE_YMD_PREFIX}`*
fi
if [ $(date +%u) = 4 ]; then
  rm -f ${BACKUPS_TOP}/`date -d'thursday-fortnight ago' +${DATE_YMD_PREFIX}`*
fi
if [ $(date +%u) = 5 ]; then
  rm -f ${BACKUPS_TOP}/`date -d'friday-fortnight ago' +${DATE_YMD_PREFIX}`*
fi
if [ $(date +%u) = 6 ]; then
  rm -f ${BACKUPS_TOP}/`date -d'saturday-fortnight ago' +${DATE_YMD_PREFIX}`*
fi
if [ $(date +%u) = 7 ]; then
  rm -f ${BACKUPS_TOP}/`date -d'sunday-fortnight ago' +${DATE_YMD_PREFIX}`*
fi

# Do everything within BACKUPS_TOP, to avoid leading-"/" warnings from tar.
cd ${BACKUPS_TOP}

THIS_BACKUP_DIR=${BACKUP_PREFIX}-${BACKUP_TIME}

test -d "${THIS_BACKUP_DIR}" || mkdir -p "${THIS_BACKUP_DIR}"
for name in $(mysql -B -s -u $DB_USER --password=$DB_PASS -e 'show databases' | grep "ttm-")
do
  mysqldump -u ${DB_USER} --password=${DB_PASS}                  \
            --single-transaction --routines "${name}"            \
    > "${THIS_BACKUP_DIR}/${name}-backup-${BACKUP_TIME}.sql"
done
tar zcf ${THIS_BACKUP_DIR}.tar.gz ${THIS_BACKUP_DIR}
rm -rf ${THIS_BACKUP_DIR}
